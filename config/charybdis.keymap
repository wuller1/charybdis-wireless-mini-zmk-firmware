#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define U_TAPPING_TERM 200

/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 1 2 3>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <4>;
        scale-divisor = <5>;

        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <4>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <6>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <5>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_HWHEEL>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_hwheel_scaler 1 14>, <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* define a resolution down scaler for INPUT_REL_HWHEEL (horizontal scroll) */

    ib_hwheel_scaler: ib_hwheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;  // Allows you to pass parameters (multiplier and divisor)
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_HWHEEL>;  // Apply this scaler to horizontal scroll events
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    // ╭──────┬──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────┬──────╮
    //    00     01     02     03    04      05        06     07     08     09     10     11
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    12     13     14     15    16      17        18     19     20     21     22     23
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    24     25     26     27    28      29        30     31     32     33     34     35
    // ╰──────┴──────┴──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┴──────┴──────┴──────╯
    //                         36     37     38        39     40
    //                      ╰──────┴──────┴──────╯  ╰──────┴──────╯
    // #define BASE    0
    // #define NUM     1
    // #define NAV     2
    // #define MOUSE   3
    // #define SLOW    4
    // #define SCROLL  5

    combos {
        compatible = "zmk,combos";

        ScrollLayer {
            bindings = <&tog 5>;
            key-positions = <44 45>;
        };

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <20 21>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <14 15>;
        };

        LeftClick {
            bindings = <&mkp LCLK>;
            key-positions = <31 32>;
        };

        RightClick {
            bindings = <&mkp RCLK>;
            key-positions = <33 32>;
        };

        MiddleClick {
            bindings = <&mkp MCLK>;
            key-positions = <33 34>;
        };
    };

    behaviors {
        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        mo_kp: mo_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_KP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp GRAVE       &kp NUMBER_1        &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5     &kp NUMBER_6  &kp N7  &kp N8     &kp N9        &kp N0                  &kp MINUS
&kp TAB         &kp Q               &kp W         &kp E         &kp R         &kp T      &kp Y         &kp U   &kp I      &kp O         &kp P                   &kp LEFT_BRACKET
&kp ESCAPE      &mt LEFT_CONTROL A  &kp S         &kp D         &kp F         &kp G      &kp H         &kp J   &kp K      &kp L         &mt RIGHT_CONTROL SEMI  &kp APOS
&kp LEFT_SHIFT  &kp Z               &kp X         &kp C         &kp V         &kp B      &kp N         &kp M   &kp COMMA  &kp DOT       &kp FSLH                &kp RIGHT_SHIFT
                &mo 2               &lt 1 SPACE   &kp LEFT_WIN  &kp HOME      &kp END    &lt 1 SPACE           &mo 2      &kp LEFT_ALT
            >;
        };

        NAV {
            bindings = <
&none           &none             &none          &none          &none         &none              &none       &none      &none         &none      &none              &none
&kp TAB         &kp LA(INSERT)    &kp LC(RIGHT)  &none          &none         &bt BT_CLR         &kp LC(C)   &kp LC(Z)  &none         &none      &kp LC(V)          &none
&kp ESCAPE      &kp LEFT_CONTROL  &kp LC(LEFT)   &kp LC(RIGHT)  &kp HOME      &kp END            &kp LEFT    &kp DOWN   &kp UP_ARROW  &kp RIGHT  &kp RIGHT_CONTROL  &none
&kp LEFT_SHIFT  &bt BT_SEL 0      &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3  &kp LC(LEFT)       &bt BT_CLR  &none      &none         &none      &none              &kp RIGHT_SHIFT
                &none             &none          &none          &kp C_VOL_DN  &kp C_VOLUME_UP    &none                  &none         &none
            >;
        };

        NUM {
            bindings = <
&kp F12         &kp F1            &kp F2             &kp F3                &kp F4                 &kp F5             &kp F6     &kp F7  &kp F8  &kp F9        &kp F10        &kp F11
&kp GRAVE       &kp EXCL          &kp AT             &kp HASH              &kp DLLR               &kp PRCNT          &none      &kp N7  &kp N8  &kp N9        &kp MINUS      &kp RIGHT_BRACKET
&kp CAPSLOCK    &none             &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp CARET          &kp UNDER  &kp N4  &kp N5  &kp N6        &kp PLUS       &kp EQUAL
&kp LEFT_SHIFT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AMPERSAND      &kp PIPE   &kp N1  &kp N2  &kp N3        &kp BACKSLASH  &kp RIGHT_SHIFT
                &none             &none              &kp INSERT            &kp C_VOLUME_DOWN      &kp C_VOLUME_UP    &kp N0             &none   &kp LEFT_ALT
            >;
        };

        MOUSE {
            bindings = <
&none           &none             &none  &none  &none  &none    &none         &none   &none   &none   &none                   &none
&none           &none             &none  &none  &none  &none    &none         &kp F7  &kp F8  &kp F9  &kp F12                 &none
&none           &kp LEFT_CONTROL  &none  &none  &none  &none    &none         &kp F4  &kp F5  &kp F6  &hmr RIGHT_CONTROL F11  &none
&kp LEFT_SHIFT  &none             &none  &none  &none  &none    &kp LEFT_ALT  &kp F1  &kp F2  &kp F3  &kp F10                 &kp RIGHT_SHIFT
                &none             &none  &none  &none  &none    &none                 &none   &none
            >;
        };

        SLOW {
            bindings = <
&none   &none   &none   &none   &none   &none     &none   &none   &none   &none   &none   &none
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &none   &none   &none   &none   &none     &none           &none   &none
            >;
        };

        SCROLL {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none   &none   &none   &none   &none   &none
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
            &none         &none         &none         &none         &none           &none           &none   &none
            >;
        };
    };
};
