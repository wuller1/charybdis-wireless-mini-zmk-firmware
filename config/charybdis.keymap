#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define U_TAPPING_TERM 200

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

/ {
    combos {
        compatible = "zmk,combos";

        ScrollLayer {
            bindings = <&tog 4>;
            key-positions = <32 33>;
        };

        LeftClck {
            bindings = <&mkp LCLK>;
            key-positions = <32 31>;
        };

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <8 9>;
        };

        bootloader_left {
            bindings = <&bootloader>;
            key-positions = <24 38>;
        };

        bootloader_right {
            bindings = <&bootloader>;
            key-positions = <35 40>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <2 3>;
        };

        LeftClick {
            bindings = <&mkp LCLK>;
            key-positions = <19 20>;
        };

        RightClick {
            bindings = <&mkp RCLK>;
            key-positions = <20 21>;
        };

        MiddleClick {
            bindings = <&mkp LCLK>;
            key-positions = <21 22>;
        };
    };

    behaviors {
        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        mo_kp: mo_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_KP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp TAB         &kp Q                &kp W  &kp E     &kp R        &kp T    &kp Y        &kp U            &kp I      &kp O    &kp P                    &kp LEFT_BRACKET
&kp ESCAPE      &hml LEFT_CONTROL A  &kp S  &kp D     &kp F        &kp G    &kp H        &hmr LEFT_ALT J  &kp K      &kp L    &hmr RIGHT_CONTROL SEMI  &kp APOS
&kp LEFT_SHIFT  &kp Z                &kp X  &kp C     &kp V        &kp B    &kp N        &kp M            &kp COMMA  &kp DOT  &kp FSLH                 &kp RIGHT_SHIFT
                                            &kp LGUI  &lt 2 SPACE  &mo 1    &lt 2 SPACE  &mo 1
            >;
        };

        VIM {
            bindings = <
&kp TAB         &kp LA(INSERT)    &kp LC(RIGHT)  &none          &none         &bt BT_CLR      &kp LC(C)   &kp LC(Z)  &none         &none      &kp LC(V)          &none
&kp ESCAPE      &kp LEFT_CONTROL  &kp LC(LEFT)   &kp LC(RIGHT)  &kp HOME      &kp END         &kp LEFT    &kp DOWN   &kp UP_ARROW  &kp RIGHT  &kp RIGHT_CONTROL  &none
&kp LEFT_SHIFT  &bt BT_SEL 0      &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3  &kp LC(LEFT)    &bt BT_CLR  &none      &none         &none      &none              &kp RIGHT_SHIFT
                                                 &none          &none         &none           &none       &none
            >;
        };

        SYMNUM {
            bindings = <
&kp GRAVE       &kp EXCL          &kp AT             &kp HASH              &kp DLLR               &kp PRCNT        &none      &kp N7  &kp N8  &kp N9  &kp MINUS      &kp RIGHT_BRACKET
&kp CAPSLOCK    &none             &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp CARET        &kp UNDER  &kp N4  &kp N5  &kp N6  &kp PLUS       &kp EQUAL
&kp LEFT_SHIFT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AMPERSAND    &kp PIPE   &kp N1  &kp N2  &kp N3  &kp BACKSLASH  &kp RIGHT_SHIFT
                                                     &none                 &none                  &none            &kp N0     &none
            >;
        };

        AUTO-MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &mkp LCLK  &mkp RCLK  &mo 4   &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &mkp LCLK  &mkp RCLK  &mo 4   &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        snipe_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
